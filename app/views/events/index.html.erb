<!-- Événements - 2 Column Layout -->
<div class="max-w-6xl mx-auto px-4 py-8">
  <!-- Page Header with Logo -->
  <%= render 'shared/page_header_with_logo', 
      title: t('events.amazing_events'),
      subtitle: t('events.subtitle') %>

  <!-- Action Buttons -->
  <% if user_signed_in? %>
    <div class="flex flex-col sm:flex-row gap-4 mb-8 justify-center">
      <%= link_to "🎉 #{t('actions.create_event')}", new_event_path, 
                  class: "px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg font-semibold" %>
    </div>
  <% end %>

  <!-- View Toggle -->
  <div class="flex justify-center mb-8">
    <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-1 flex">
      <button id="list-view-btn" onclick="showListView()" class="px-6 py-2 rounded-md font-semibold transition-all duration-200 bg-blue-500 text-white">
        📋 <%= t('events.view.list') %>
      </button>
      <button id="calendar-view-btn" onclick="showCalendarView()" class="px-6 py-2 rounded-md font-semibold transition-all duration-200 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100">
        📅 <%= t('events.view.calendar') %>
      </button>
    </div>
  </div>

  <!-- Filters Section -->
  <div class="flex flex-col md:flex-row gap-4 mb-8 justify-center">
    <select class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100">
      <option><%= t('events.filters.period') %></option>
      <option><%= t('events.filters.this_week') %></option>
      <option><%= t('events.filters.this_month') %></option>
      <option><%= t('events.filters.upcoming') %></option>
      <option><%= t('events.filters.past') %></option>
    </select>
    <select class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100">
      <option><%= t('events.filters.event_type') %></option>
      <option><%= t('events.types.festivals') %></option>
      <option><%= t('events.types.concerts') %></option>
      <option><%= t('events.types.exhibitions') %></option>
      <option><%= t('events.types.conferences') %></option>
      <option><%= t('events.types.sports') %></option>
    </select>
    <button class="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700">
      🔄 <%= t('actions.refresh') %>
    </button>
  </div>

  <!-- 2-Column Events Grid -->
  <div id="list-view" class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <% @events.each do |event| %>
      <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-pointer" onclick="openModal('event-<%= event.id %>')">
        <div class="flex gap-4">
          <div class="w-24 h-24 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden">
            <% if event.images.attached? %>
              <%= image_tag event.images.first, alt: event.title, class: "w-full h-full object-cover" %>
            <% else %>
              <span class="text-3xl"><%= get_event_emoji(event.category) %></span>
            <% end %>
          </div>
          <div class="flex-1">
            <div class="flex justify-between items-start mb-2">
              <span class="bg-blue-500 text-white px-2 py-1 rounded text-xs"><%= event.category.humanize %></span>
              <span class="text-sm text-gray-500 dark:text-gray-400"><%= l(event.date, format: '%d %B') %></span>
            </div>
            <h3 class="font-bold text-lg mb-1 text-gray-900 dark:text-gray-100"><%= event.title %></h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm mb-2"><%= truncate(event.description, length: 80) %></p>
            <div class="flex justify-between items-center">
              <span class="text-xs text-gray-500 dark:text-gray-400">📍 <%= event.location %></span>
              <button class="text-blue-600 hover:text-blue-800 text-sm font-medium" onclick="event.stopPropagation(); openModal('event-<%= event.id %>')">
                🎫 <%= t('actions.sign_up_event') %>
              </button>
            </div>
          </div>
        </div>
      </div>
    <% end %>

    <% if @events.empty? %>
      <div class="col-span-full text-center py-12">
        <div class="text-6xl mb-4">📅</div>
        <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2">Aucun événement trouvé</h3>
        <p class="text-gray-600 dark:text-gray-400"><%= t('common.first_to_create') %></p>
      </div>
    <% end %>

  </div>

<!-- Calendar Modal -->
<div id="calendar-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50 p-4">
  <div class="bg-white dark:bg-gray-800 w-full max-w-6xl rounded-lg overflow-hidden max-h-[95vh] overflow-y-auto">
    <div class="p-6">
      <!-- Calendar Modal Header -->
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-3xl font-bold text-gray-900 dark:text-gray-100">📅 Calendrier des Événements</h2>
        <button onclick="closeCalendarModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-3xl font-bold">×</button>
      </div>
      
      <!-- Calendar Navigation -->
      <div class="flex justify-between items-center mb-8">
        <div class="flex items-center gap-6">
          <button onclick="previousMonth()" class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 font-semibold">
            ← Précédent
          </button>
          <h3 id="calendar-month-year" class="text-2xl font-bold text-gray-900 dark:text-gray-100 min-w-[200px] text-center">
            Juillet 2025
          </h3>
          <button onclick="nextMonth()" class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 font-semibold">
            Suivant →
          </button>
        </div>
        <button onclick="goToToday()" class="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 font-semibold">
          Aujourd'hui
        </button>
      </div>

      <!-- Calendar Grid -->
      <div class="bg-gray-800 dark:bg-gray-800 rounded-lg overflow-hidden shadow-lg w-full max-w-lg mx-auto border border-gray-600">
        <!-- Calendar Header (Days of week) -->
        <div style="display: grid; grid-template-columns: repeat(7, 1fr);" class="bg-gray-700 dark:bg-gray-700 text-center py-3 border-b border-gray-600">
          <div class="text-white font-semibold text-sm">Su</div>
          <div class="text-white font-semibold text-sm">Mo</div>
          <div class="text-white font-semibold text-sm">Tu</div>
          <div class="text-white font-semibold text-sm">We</div>
          <div class="text-white font-semibold text-sm">Th</div>
          <div class="text-white font-semibold text-sm">Fr</div>
          <div class="text-white font-semibold text-sm">Sa</div>
        </div>
        
        <!-- Calendar Body - Clean Monthly Grid View -->
        <div id="calendar-body" style="display: grid; grid-template-columns: repeat(7, 1fr); grid-template-rows: repeat(6, 48px); height: 288px;">
          <!-- Calendar days will be dynamically generated here in a 7x6 grid (42 days) -->
        </div>
      </div>
      
      <!-- Calendar Legend -->
      <div class="mt-6 flex flex-wrap gap-6 justify-center text-sm text-gray-400">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 bg-pink-500 rounded-full"></div>
          <span>Aujourd'hui</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-2 h-2 bg-blue-400 rounded-full"></div>
          <span>Événements</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 bg-gray-500 rounded"></div>
          <span>Autres mois</span>
        </div>
      </div>
    </div>
  </div>
</div>
</div>

<!-- Detail Modal -->
<div id="detail-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50">
  <div class="bg-white dark:bg-gray-800 max-w-3xl w-full mx-4 rounded-lg overflow-hidden max-h-[80vh] overflow-y-auto">
    <div class="p-6">
      <!-- Modal Header -->
      <div class="flex justify-between items-start mb-6">
        <div id="modal-category" class="bg-blue-500 text-white px-4 py-2 rounded-full text-sm font-medium"></div>
        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl font-bold">×</button>
      </div>
      
      <!-- Modal Content -->
      <div class="flex gap-6 mb-6">
        <div id="modal-image" class="w-32 h-32 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center flex-shrink-0">
          <span id="modal-emoji" class="text-4xl"></span>
        </div>
        <div class="flex-1">
          <h2 id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4"></h2>
          <div class="space-y-2 mb-4">
            <div id="modal-date" class="flex items-center text-gray-600 dark:text-gray-400">
              <span class="mr-2">📅</span>
              <span id="modal-date-text"></span>
            </div>
            <div id="modal-location" class="flex items-center text-gray-600 dark:text-gray-400">
              <span class="mr-2">📍</span>
              <span id="modal-location-text"></span>
            </div>
            <div id="modal-price" class="flex items-center text-gray-600 dark:text-gray-400">
              <span class="mr-2">💰</span>
              <span id="modal-price-text"></span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Event Description -->
      <div class="mb-6">
        <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100 mb-3">Description</h3>
        <div id="modal-description" class="text-gray-600 dark:text-gray-400 space-y-2 leading-relaxed"></div>
      </div>
      
      <!-- Registration Form -->
      <div class="border-t dark:border-gray-600 pt-6">
        <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100 mb-4"><%= t('common.join_event_modal') %></h3>
        <% if user_signed_in? %>
        <form class="space-y-4" onsubmit="handleRegistrationSubmit(event)">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="md:col-span-2">
              <label class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Nom complet</label>
              <input type="text" class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none" placeholder="Prénom Nom" required style="background-color: white !important; color: black !important;">
            </div>
          </div>
          <div>
            <label class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Nombre de participants</label>
            <select class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none" required style="background-color: white !important; color: black !important;">
              <option>1 personne</option>
              <option>2 personnes</option>
              <option>3 personnes</option>
              <option>4 personnes</option>
              <option>5+ personnes</option>
            </select>
          </div>
          <div>
            <label class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Message (optionnel)</label>
            <textarea rows="3" class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none resize-none" placeholder="Questions ou remarques..." style="background-color: white !important; color: black !important;"></textarea>
          </div>
          <div class="flex gap-4 pt-4">
            <button type="submit" class="bg-purple-500 hover:bg-purple-600 text-white flex-1 py-3 px-6 rounded-lg font-semibold">
              🎫 <%= t('actions.confirm_registration') %>
            </button>
            <button type="button" onclick="closeModal()" class="bg-gray-500 hover:bg-gray-600 text-white py-3 px-6 rounded-lg font-semibold">
              <%= t('actions.close') %>
            </button>
          </div>
        </form>
        <% else %>
          <div class="text-center py-6">
            <p class="text-gray-600 dark:text-gray-400 mb-4">Connectez-vous pour vous inscrire à cet événement</p>
            <%= link_to "Se connecter", new_user_session_path, class: "px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition-colors" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
// Calendar and Events System
let currentDate = new Date();
let currentModalId = null; // Track current open modal
const monthNames = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", 
                   "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"];

// Dynamic events data from Rails - convert ALL events to JavaScript for calendar
const eventsData = {
  <% @all_events.each_with_index do |event, index| %>
    'event-<%= event.id %>': {
      category: '<%= j event.category.humanize %>',
      title: '<%= j event.title %>',
      date: '<%= event.date.strftime('%Y-%m-%d') %>',
      time: '<%= event.date.strftime('%H:%M') %>',
      location: '<%= j (event.location || 'Lieu à déterminer') %>',
      price: '<%= j (event.price.present? ? "#{event.price}€" : 'Gratuit') %>',
      emoji: '<%= get_event_emoji(event.category) %>',
      description: '<%= j truncate(event.description, length: 200) %>',
      eventId: <%= event.id %>
    }<%= ',' unless index == @all_events.count - 1 %>
  <% end %>
};

// Debug: Log events data to console
console.log('📅 Events loaded for calendar:', eventsData);
console.log('📅 Total events count:', Object.keys(eventsData).length);

// View switching functions
function showListView() {
  // Reset button styles
  document.getElementById('list-view-btn').classList.add('bg-blue-500', 'text-white');
  document.getElementById('list-view-btn').classList.remove('text-gray-600', 'dark:text-gray-400');
  
  document.getElementById('calendar-view-btn').classList.remove('bg-blue-500', 'text-white');
  document.getElementById('calendar-view-btn').classList.add('text-gray-600', 'dark:text-gray-400');
}

function showCalendarView() {
  // Open calendar modal
  document.getElementById('calendar-modal').style.display = 'flex';
  document.getElementById('calendar-modal').classList.remove('hidden');
  
  // Update button styles
  document.getElementById('calendar-view-btn').classList.add('bg-blue-500', 'text-white');
  document.getElementById('calendar-view-btn').classList.remove('text-gray-600', 'dark:text-gray-400');
  
  document.getElementById('list-view-btn').classList.remove('bg-blue-500', 'text-white');
  document.getElementById('list-view-btn').classList.add('text-gray-600', 'dark:text-gray-400');
  
  // Generate calendar for current month
  generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
}

function closeCalendarModal() {
  document.getElementById('calendar-modal').style.display = 'none';
  document.getElementById('calendar-modal').classList.add('hidden');
  
  // Reset button styles back to list view
  showListView();
}

// Calendar functions
function generateCalendar(year, month) {
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - firstDay.getDay());
  
  // Update month/year header
  document.getElementById('calendar-month-year').textContent = 
    `${monthNames[month]} ${year}`;
  
  const calendarBody = document.getElementById('calendar-body');
  calendarBody.innerHTML = '';
  
  // Generate 6 weeks (42 days)
  for (let i = 0; i < 42; i++) {
    const cellDate = new Date(startDate);
    cellDate.setDate(startDate.getDate() + i);
    
    // Check if this date has events
    const dateStr = cellDate.toISOString().split('T')[0];
    const dayEvents = Object.entries(eventsData).filter(([key, event]) => event.date === dateStr);
    const hasEvents = dayEvents.length > 0;
    
    // Debug: Log events for specific dates
    if (cellDate.getDate() === 26 && cellDate.getMonth() === 6) {
      console.log(`📅 July 26 debug - dateStr: ${dateStr}, hasEvents: ${hasEvents}, dayEvents:`, dayEvents);
    }
    
    // Check if it's today
    const today = new Date();
    const isToday = cellDate.toDateString() === today.toDateString();
    
    const dayCell = document.createElement('div');
    dayCell.style.cssText = `
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s;
      position: relative;
      height: 48px;
      background-color: ${cellDate.getMonth() !== month ? '#374151' : '#4B5563'};
      color: ${cellDate.getMonth() !== month ? '#9CA3AF' : '#FFFFFF'};
      border: 1px solid #4B5563;
    `;
    
    dayCell.onmouseenter = () => {
      dayCell.style.backgroundColor = '#6B7280';
    };
    dayCell.onmouseleave = () => {
      dayCell.style.backgroundColor = cellDate.getMonth() !== month ? '#374151' : '#4B5563';
    };
    
    // Add day number
    const dayNumber = document.createElement('div');
    if (isToday) {
      dayNumber.style.cssText = `
        background-color: #EC4899;
        color: white;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 14px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      `;
    } else {
      dayNumber.style.cssText = `
        font-weight: 600;
        font-size: 14px;
        color: ${hasEvents ? '#93C5FD' : (cellDate.getMonth() !== month ? '#9CA3AF' : '#FFFFFF')};
      `;
    }
    dayNumber.textContent = cellDate.getDate();
    dayCell.appendChild(dayNumber);
    
    // Add event title(s) below the day number
    if (hasEvents) {
      const eventsContainer = document.createElement('div');
      eventsContainer.style.cssText = `
        position: absolute;
        bottom: 2px;
        left: 2px;
        right: 2px;
        font-size: 10px;
        line-height: 1.1;
        color: #93C5FD;
        font-weight: 500;
        overflow: hidden;
        text-align: center;
      `;
      
      // Show first event title (truncated if too long)
      const firstEventTitle = dayEvents[0][1].title;
      const truncatedTitle = firstEventTitle.length > 8 ? firstEventTitle.substring(0, 8) + '...' : firstEventTitle;
      eventsContainer.textContent = truncatedTitle;
      
      // If multiple events, add indicator
      if (dayEvents.length > 1) {
        const multiEventIndicator = document.createElement('div');
        multiEventIndicator.style.cssText = `
          position: absolute;
          top: -2px;
          right: 2px;
          width: 6px;
          height: 6px;
          background-color: #F59E0B;
          border-radius: 50%;
          font-size: 8px;
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
        `;
        multiEventIndicator.textContent = '+';
        eventsContainer.appendChild(multiEventIndicator);
      }
      
      dayCell.appendChild(eventsContainer);
    }
    
    // Add click handler to show events for this day
    if (hasEvents) {
      dayCell.onclick = () => {
        // If multiple events, show first one (or you could create a day view modal)
        openModal(dayEvents[0][0]);
      };
    }
    
    calendarBody.appendChild(dayCell);
  }
}

function previousMonth() {
  currentDate.setMonth(currentDate.getMonth() - 1);
  generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
}

function nextMonth() {
  currentDate.setMonth(currentDate.getMonth() + 1);
  generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
}

function goToToday() {
  currentDate = new Date();
  generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
}

// Modal functions
function openModal(modalId) {
  currentModalId = modalId; // Store current modal ID
  const data = eventsData[modalId];
  if (data) {
    document.getElementById('modal-category').textContent = data.category;
    document.getElementById('modal-title').textContent = data.title;
    document.getElementById('modal-date-text').textContent = new Date(data.date).toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }) + ` à ${data.time}`;
    document.getElementById('modal-location-text').textContent = data.location;
    document.getElementById('modal-price-text').textContent = data.price;
    document.getElementById('modal-emoji').textContent = data.emoji;
    document.getElementById('modal-description').innerHTML = `<p>${data.description}</p>`;
    
    // Set category color based on category name
    const categoryElement = document.getElementById('modal-category');
    const categoryColors = {
      'Festival': 'bg-purple-500',
      'Environment': 'bg-green-500',
      'Concert': 'bg-blue-500',
      'Sport': 'bg-red-500',
      'Food': 'bg-yellow-500',
      'Culture': 'bg-indigo-500',
      'Business': 'bg-gray-500',
      'Education': 'bg-teal-500',
      'Technology': 'bg-cyan-500',
      'Health': 'bg-pink-500',
      'Community': 'bg-orange-500',
      'Family': 'bg-rose-500'
    };
    
    categoryElement.className = `text-white px-4 py-2 rounded-full text-sm font-medium ${categoryColors[data.category] || 'bg-blue-500'}`;
    
    document.getElementById('detail-modal').style.display = 'flex';
    document.getElementById('detail-modal').classList.remove('hidden');
  }
}

function closeModal() {
  document.getElementById('detail-modal').style.display = 'none';
  document.getElementById('detail-modal').classList.add('hidden');
}

function handleRegistrationSubmit(event) {
  event.preventDefault();
  
  const form = event.target;
  const eventData = eventsData[currentModalId];
  
  if (!eventData) {
    alert('Erreur: Impossible de trouver l\'événement.');
    return;
  }
  
  // Get form data
  const formData = new FormData(form);
  const participants = form.querySelector('select').value;
  const message = form.querySelector('textarea').value;
  
  // For now, just submit the RSVP
  // In a real implementation, you'd want to add fields for participants count and message
  fetch(`/events/${eventData.eventId}/rsvp`, {
    method: 'POST',
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    credentials: 'same-origin'
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert('Inscription confirmée! Vous recevrez un email de confirmation.');
      closeModal();
      // Reload page to show updated RSVP status
      window.location.reload();
    } else {
      const errorMessage = data.errors ? data.errors.join(', ') : (data.error || 'Erreur lors de l\'inscription.');
      alert(errorMessage);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Erreur lors de l\'inscription. Veuillez réessayer.');
  });
}

// Close modal when clicking outside
document.getElementById('detail-modal').addEventListener('click', function(e) {
  if (e.target === document.getElementById('detail-modal')) {
    closeModal();
  }
});

// Close calendar modal when clicking outside
document.getElementById('calendar-modal').addEventListener('click', function(e) {
  if (e.target === document.getElementById('calendar-modal')) {
    closeCalendarModal();
  }
});

// Initialize calendar on page load
document.addEventListener('DOMContentLoaded', function() {
  generateCalendar(currentDate.getFullYear(), currentDate.getMonth());
});
</script>
